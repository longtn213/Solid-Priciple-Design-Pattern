Design Principles 
	- Design Principles (Such as SOLID principles) are high level guidelines to design resable software applications
	- pure abstractions - without implementation or programming language 
	- They can be applies in any programming languages
	- These principles are platform independent
	
Design Patterns
	- Design patterns are the low-level solutions of frequent object-oriented programming (OOP) related problems
	- It is the concrete implementation
	- Several design principle can be implemented by design patterns
	- Design patterns are tested by others - these techniques are state-of-the-art problem specific solutions
	
***Design Principles : allow scalable and maintable software architectures  <=> Design patterns : are more about how to design you code + concrete implementations of the design principles

There are 3 types of design patterns:
	+) Creational Patterns : These patterns are designed for class instantiation( class creational patterns and object creational patterns ) 
	+) Structural Patterns : These patterns are designed for class structure (How to increase the functionality of a class ) 
	+) Behavioral Patterns : These patterns are dealing with how to communicate effectively between given classes
	
I. CREATIONAL PATTERNS :
	1. Singleton Pattern: 
		- It lets you ensure that a class has only one instance while providing a global access point to this instance
		- It ensures that a given class has just a single instance
		- The singleton pattern provides a global access point to that given instance
		- We can control access to a shared resource such as files , databases or thread pools (when dealing with multithreading) 
		- It is extremely crucial in logging 
		* Trong Singleton pattern thì giúp chúng ta triển khai 1 đối tượng duy nhất trong toàn bộ chương trình mà cho phép tất cả các đối tượng khác đều truy cập vào cùng 1 Instance đó. 
		
		+) Nhưng sẽ gặp vấn đề trong multiple thread vì mỗi lần 1 thread truy cập thì sẽ tạo ra đồng thời các instance khác nhau nên phá vỡ tính duy nhất singleton. 
			- Cách giải quyết 1: Chúng ta có thể giải quyết bằng synchronized để đảm bảo chỉ có 1 luồng duy nhất nhưng sẽ làm chậm quá trình truy cập do phải kiểm tra khóa mỗi lần truy cập
			- Cách giải quyết 2: sử dụng Enum để khởi tạo vì nó là compile time constant nên mặc định là thread safe
		
	2. Factory Pattern: We should favor abstraction (supertypes) instead of concrete implementations.We can instantiate the classes in a separate class
		- Factory pattern helps to create loosely coupled OOP design
		- There is a fundamental problem with the new keyword
		- Whenever we use the new keyword ( and instantiate a class ) we definitely violate this principle
		- typing out code concrete classes makes the application less flexible and more fragile
		
		+) Abstract Factory Pattern :
			- Factories that creates other factories  (factories of the factories )
			- It is an interface is responsible for creating a factory of related objects without explicity specifying their classes
		
	3. Builder Pattern: Giúp xây dựng đối tượng 1 cách linh hoạt ,dễ đọc và đặc biệt duy trì tính bất biến của đối tượng 
		- Builder pattern is may be #1 design pattern in software engineering
		- The builder pattern satfisfies the immutable property
		
		Advantage: Why to prefer builder pattern ?
			- There would be lots of parameters in the constructor ~ hard to follow
				+) Hard not to confuse parameters !!! setters are the same, not the best solutions
			
			- not extensible : when we have to add one more opitional parameters, we have to create a new constructor
				+) Telescoping constructors appear !!! With a builder -> we just add another method
			
			- immutable property : we should consider parallel excution
				+) The best is to use projects that can not be modified after they have been created "immutable objects"
				~ so there will not be any problems because of concurrent updates by multiple threads
		Usage : We should use builder pattern when multiple representation of objects are required or when the object creation contains optional parameters
		
	4. Prototype Pattern: 1 phương pháp dùng để sao chép các đối tượng 1 cách nhanh chóng, giảm thiểu chi phí và phức tạp trong việc khởi tạo
		- The aim is to be able to copy existing objects with depending on those given classes
		Advantage : Hiệu suất cao, tránh tạo mới từ đầu, độc lập với lớp cụ thể , dễ dàng tạo các biến thể
		Usage: 
			+) Khi tạo mới đối tượng là tốn kém -> giảm chi phí = sao chép các đối tượng
			+) Khi cần tạo nhiều instance của 1 đối tượng với cấu hình khác nhau
			+) Khi muốn giảm sự phụ thuộc vào hệ thống khởi tạo đối tượng phức tạp
		Disadvantage : khó thực hiện sao chép sâu ( deep copy ) , quản lý các đối tượng phức tạp

II. BEHAVIORAL PATTERNS:
	1. Strategy pattern : 
		- this extremely closer close/open priciple
		- strategy pattern ( or policy pattern) enable selecting an algorithm at run time
		- define a family of algorithms, put each of them into a separate class, and make their objects interchangeable
		- Favor composition over inhertitance : 
			+) Inheritance ( IS A relationship every class can extend a single class in java) <-> Composition ( HAS A relationship every class can have several instance encapsulated variable + give more flexibility)
		Advantages:
			+) we can use if-else statements instead of the strategy pattern but it is hard to test these statements
			+) every single possible branch of the application increases the cyclomatic complex of the software
		* cyclomatic complex : It is a quantitative measure of the number of linerly independent paths through a program's source code
	
	2. Observer pattern : 
		- the observer pattern defines a one -to-many dependency between given objects or enities
		- so that when one object changes state all of its dependents are notified and updated automatically
		- the subject is the object that is being monitored
		- observers (or listeners) are depending on the subject
		 
		* a loosely coupled software system: A lossely coupled system is when the software components has very little or no knowledge of the definitions of other separate components
		
	3. Command pattern: is a behavioral design pattern that helps in encapsulating a request as an object, allowing for parameterization of clients with queues, requests, and operations
		- There are 4 components : 
			+) Command: it knows about receiver and invokes a method of the receiver. The values for paramters of the receiver method are store
			+) Receiver : it does the work itself
			+) Invoker : knows how to execute a command and optionally does bookkeeping about the command execution. The invoker does not know anything about a concrete command it knows only about command interface
			+) Client: the client decides which commands to execute. To execute a command it passes the command object to the invoker object
		Advantages of Command pattern: 
			+) We can decouple classes that invoke the operations and the classes that will execute these operation: Loosely coupled design + single responsible
			+) We can add futher commands without modifying existing code : open/closed principle
			+) We do not have to execute the commands immediately - we can store these commands in a data structure : We can implement undo/ redo operations 
			
		
	4. Iterator pattern: is a behavioral design pattern that provides a way to access elements of a collection sequentially without exposing its underlying representation.
	
	5. Template pattern :is a behavioral design pattern that defines the skeleton of an algorithm in a base class but allows subclasses to override specific steps of the algorithm without changing its structure
		+) Defining an Algorithm: The Template Method is a method in a base class that outlines the steps of an algorithm and controls its flow, calling other methods that can be defined in subclasses.
		+) Reusability: Common code is placed in the base class, promoting code reuse among subclasses. This decreases code duplication and enforces a consistent structure.
		+) Control Over Changes: The base class can control the overall process while allowing subclasses to customize or extend certain steps, providing flexibility in changing behaviors.
		+) Ease of Maintenance: As changes to the algorithm's structure are centralized in the base class, it simplifies maintenance. Subclasses can focus on implementation details instead.
		+) Encapsulation of Variability: By defining the invariant parts of the algorithm in the template method, 
		the pattern cleanly encapsulates variation in subclasses, ensuring they can extend functionality without affecting the algorithm's core.
	
	6. Null Object pattern : is a design pattern used in software development, particularly in OOP. Its purpose is to avoid null references and the potential for NullPointerExceptions 
			by Introduceing a special class that behaves like a "null" object but provides a default behaviors
		+) Advantages : 
			- Eliminates null checks
			- Enhances code readability
	
	7. Visitor pattern : is a way of separating an algorithm from an object structure on which it operates
		+) Advantages
			- Decouples Operations from Elements: can add new operations without altering existing classes
			- Promotoes the Open/Closed Principle : new visitor classes can be created for new operations without modification of existing code
			- Improves Code Organization : Helps in keeping operations and behavior separate, leading to more maintainable code
	
III. STRUCTURAL PATTERN	
	1. Decorator pattern: that allows behavior to be added to individual objects dynamically, without affecting the behavior of other objects from the same class.
		This pattern is particularly useful for adhering to the Single Responsibility Principle, as it enables functionality to be separated among different class.
		+) Advantages:
			- Flexibility : can add or remove functionality at runtime without affecting other object
			- Better code organization: Enhances code organization by separating behavior into different decorators.
			- Adheres to SOLID principle: support Open/Closed Principle, allowing the system to be extended with new behaviors through decorators
		
	2. Facade pattern: that provides a simplified interface to a complex subsytems. It hides the complexities of the subsytems by creating a unified interface that makes the subsytems easier to use
		+) Advantages: 
			- Simplification : Provides a simple interface to a complex system , making it easier to use
			- Decoupling : Reduces dependencies between the client and the subsystems, promoting loose coupling
			- Easier maintenance: Changes made to the subsystem do not affect the client code, as it interacts only with the Facade.
	
	3. Flyweight Pattern: that aims to reduce the memory footprint ò applications by sharing common parts of state between when dealing with a large number of similar objects, 
			as it enables you to minimize the overhead associated with their creation
		+) Advantages: 
			- Memory Efficiency : reduce the memory footprint by sharing state
			- Performance Improvement: Fewer instances of classes mean less overhead on object creation and management
	
	3. Adapter pattern: allows  objects with incompatible interfaces to collaborate and work together. 
		It acts as a bridge between two incompatible interfaces
		It is often used to make existing classes work with others without modifying their source code
		+) Advantages:
			- Flexibility: Allows you to reuse existing software components even if they do not fit into your desired interface.
			- Simplifies Code: Reduces the need for complex switch statements or manually changing code for different interfaces
			- Promotes Code Reusability: Makes your code easier to maintain and extend by allowing new classes to be compatible with the existing system
	4. Model-View-Controller (MVC) Pattern: separate application logic into three three interconnected components. This separate  helps manage complexity and promotes organied code
		Model : it includes all data and its related logic ( data access objects, model classes, databases)
		View: handles user interations (GUI) and presents the data to the user ( user interface relate components : button, text fields etc...)
		Controller : an abstract layer between the view and the model
		+) Advantages:
			- Sepatation of Concerns : Each component handle a distinct part of the functionality, making the code easier to manager and test
			- Reusability : Components can be reused across different parts of the application, enhancing maintainability.
			- Scalability : allows for easy scaling and modification, as changes in one component have minimal impact on others
		+) Disadvantage: 
			- Model and view are decoupled but they are not independent
			- When the model changes frequently - we have to update the views as well
			- The view takes some time to render
			- In modern web applications or smartphones applications ther are an enormous number of interations
	
	